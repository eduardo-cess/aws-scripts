AWSTemplateFormatVersion: 2010-09-09
Description: Creates an EC2 with S3 and RDS access, and codeploy agent

Parameters:
  Region:
    Type: String
    Default: us-east-1
  AvailabilityZone:
    Type: AWS::EC2::AvailabilityZone::Name
  EnvironmentType:
    Description: "Specify the Environment type of the stack."
    Type: String
    Default: dev
    AllowedValues:
      - dev
      - test
      - prod
  AmiID:
    Type: String
    Description: "The ID of the AMI."
    Default: ami-0b0ea68c435eb488d
  InstanceTagName: 
    Type: String
  KeyPairName:
    Type: String
    Description: The name of an existing Amazon EC2 key pair in this region to use to SSH into the Amazon EC2 instances.
  UserDataScript:
    Type: String
    Description: EC2 Userdata script
  LogsDirectory:
    Type: String
    Description: Logs directory full path
  LogsFileName:
    Type: String

Mappings:
  EnvironmentToInstanceType:
    dev:
      InstanceType: t2.micro
    test:
      InstanceType: t2.micro
    prod:
      InstanceType: t2.micro

Resources:
  WebAppInstance:
    Type: AWS::EC2::Instance
    Properties:
      AvailabilityZone: !Ref AvailabilityZone
      ImageId: !Ref AmiID
      InstanceType:
        !FindInMap [
          EnvironmentToInstanceType,
          !Ref EnvironmentType,
          InstanceType,
        ]
      Tags:
        - Key: Name
          Value: !Ref InstanceTagName
      KeyName: !Ref KeyPairName
      SecurityGroupIds:
        - !Ref WebAppSecurityGroup
      UserData:
        Fn::Base64:
          !Sub |
            #!/bin/bash
            sudo su
            apt-get -y update
            curl -s https://deb.nodesource.com/setup_16.x | bash
            apt-get -y install jq awscli ruby
            apt install nodejs -y
            npm install pm2 -g
            cd /tmp/
            REGION=$(curl -s 169.254.169.254/latest/dynamic/instance-identity/document | jq -r ".region")
            wget https://aws-codedeploy-${Region}.s3.amazonaws.com/latest/install
            chmod +x ./install
            ./install auto
            
            mkdir /home/cloudwatch/
            mkdir ${LogsDirectory}
            touch ${LogsDirectory}/${LogsFileName}

            echo "[general]
            state_file = /var/awslogs/state/agent-state
            [${LogsDirectory}/${LogsFileName}]
            datetime_format = %d/%b/%Y:%H:%M:%S
            file = ${LogsDirectory}/${LogsFileName}
            buffer_duration = 5000
            log_stream_name = ${LogsFileName}
            initial_position = start_of_file
            log_group_name = Ec2Bot" > /home/cloudwatch/awslogs.conf

            curl https://s3.amazonaws.com/aws-cloudwatch/downloads/latest/awslogs-agent-setup.py -O
            python ./awslogs-agent-setup.py --region us-east-1 --non-interactive -c /home/cloudwatch/awslogs.conf

            ${UserDataScript}
      IamInstanceProfile: !Ref S3BucketsInstanceProfile

  S3BucketsInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
      - Ref: S3BucketsRole
  S3BucketsPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: S3BucketsPolicy
      PolicyDocument:
        Statement:
        - Sid: S3Policy
          Effect: Allow
          Action:
          - s3:*
          Resource: "*"
        - Sid: SSMPolicy
          Effect: Allow
          Action:
          - ssm:GetParameters
          Resource: "*"
        - Sid: CloudWatchPolicy
          Effect: Allow
          Action:
          - logs:CreateLogGroup
          - logs:CreateLogStream
          - logs:PutLogEvents
          - logs:DescribeLogStreams
          Resource: "*"
      Roles:
      - Ref: S3BucketsRole
  S3BucketsRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"

  WebAppSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Join ["-", [webapp-security-group, !Ref EnvironmentType]]
      GroupDescription: "Allow HTTP/HTTPS and SSH inbound and outbound traffic"
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0

  WebAppEIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      InstanceId: !Ref WebAppInstance
      Tags:
        - Key: Name
          Value: !Join ["-", [webapp-eip, !Ref EnvironmentType]]

Outputs:
  WebsiteURL:
    Value: !Sub http://${WebAppEIP}
    Description: WebApp URL